----------------------------------------------------------------------------
--	Ranked Matchmaking AI v1.3 New Structure
--	Author: adamqqq		Email:adamqqq@163.com
----------------------------------------------------------------------------
--------------------------------------
-- General Initialization
--------------------------------------
local utility = require( GetScriptDirectory().."/utility" ) 
require(GetScriptDirectory() ..  "/ability_item_usage_generic")
local fun1 = require(GetScriptDirectory().."/util/AbilityAbstraction")

local debugmode=false
local npcBot = GetBot()
local Talents ={}
local Abilities ={}
local AbilitiesReal ={}

ability_item_usage_generic.InitAbility(Abilities,AbilitiesReal,Talents) 

local AbilityToLevelUp=
{
	Abilities[3],
	Abilities[1],
	Abilities[3],
	Abilities[2],
	Abilities[3],
	Abilities[6],
	Abilities[3],
	Abilities[2],
	Abilities[2],
	"talent",
	Abilities[2],
	Abilities[6],
	Abilities[1],
	Abilities[1],
	"talent",
	Abilities[1],
	"nil",
	Abilities[6],
	"nil",
	"talent",
	"nil",
	"nil",
	"nil",
	"nil",
	"talent",
}
local TalentTree={
	function()
		return Talents[1]
	end,
	function()
		return Talents[4]
	end,
	function()
		return Talents[5]
	end,
	function()
		return Talents[7]
	end
}

-- check skill build vs current level
utility.CheckAbilityBuild(AbilityToLevelUp)

function AbilityLevelUpThink()
	ability_item_usage_generic.AbilityLevelUpThink2(AbilityToLevelUp,TalentTree)
end

function CanCast1( npcEnemy )
	if(npcEnemy==nil)
	then
		return false
	end
	return npcEnemy:CanBeSeen() and not npcEnemy:IsInvulnerable()
end

--------------------------------------
-- Ability Usage Thinking
--------------------------------------
local cast={} cast.Desire={} cast.Target={} cast.Type={}
local Consider ={}

function GetComboDamage()
	return ability_item_usage_generic.GetComboDamage(AbilitiesReal)
end

local level
local attackRange
local health
local maxHealth
local healthPercent
local mana
local maxMana
local manaPercent
local netWorth

local allEnemies
local enemies
local enemyCount
local friends
local friendCount
local enemyCreeps
local friendCreeps
local neutralCreeps
local tower

local CanCast={function(t) 
	return not t:IsHero() and not fun1:IsRoshan(t) and t:GetLevel() <= AbilitiesReal[1]:GetLevel()+3
end
	,utility.NCanCast,utility.NCanCast,utility.UCanCast,utility.UCanCast,utility.UCanCast}
local enemyDisabled=utility.enemyDisabled

local function GetComboMana()
	local mana = 0
	local dotaTime = DotaTime()/60
	local estimatedFightTime = if dotaTime <= 20 {
		RemapVal(dotaTime, 10, 20, 10, 15)
	} elif dotaTime <= 30 {
		RemapVal(dotaTime, 20, 30, 15, 30)
	} elif dotaTime <= 45 {
		RemapVal(dotaTime, 30, 45, 30, 50)
	} else { 50 }

	local function GetAbilityMana(ability)
		if ability:GetManaCost() == 0 then
			return 
		end
		local scorchedEarthReady = ability:IsFullyCastable()
		if scorchedEarthReady then
			mana += ability:GetManaCost()
		end
		mana += estimatedFightTime / ability:GetCooldown() * ability:GetManaCost()
	end
	fun1:ForEach({AbilitiesReal[2], AbilitiesReal[3], AbilitiesReal[6]}) { t -> 
		GetAbilityMana(t)
	}
	if dotaTime >= 30 and AbilitiesReal[1]:IsCooldownReady() then 
		mana += AbilitiesReal[1]:GetManaCost()
	end
	return mana
end

Consider[1]=function()
	local abilityNumber=1
	--------------------------------------
	-- Generic Variable Setting
	--------------------------------------
	local ability=AbilitiesReal[abilityNumber];
	
	if not ability:IsFullyCastable() then
		return BOT_ACTION_DESIRE_NONE, 0;
	end
	
	local CastRange = ability:GetCastRange();
	local Damage = ability:GetAbilityDamage();
	
	local CreepHealth=10000
	local allys = npcBot:GetNearbyHeroes( 1200, false, BOT_MODE_NONE )

	local creeps = npcBot:GetNearbyCreeps(CastRange + 200, true)
	if npcBot:GetAbilityByName "special_bonus_unique_doom_bringer_3":GetLevel() < 1 then
		creeps = fun1:Filter(creeps, function(t) return not t:IsAncientCreep() end)
	end
	local StrongstCreep,CreepHealth=utility.GetStrongestUnit(creeps)
	
	if StrongstCreep and CanCast[abilityNumber](StrongstCreep) then
		return BOT_ACTION_DESIRE_HIGH, StrongstCreep
	end
	
	for _,npcEnemy in pairs( creeps )
	do
		if ( CanCast[abilityNumber]( npcEnemy ) ) 
		then
			return BOT_ACTION_DESIRE_HIGH, npcEnemy
		end
	end
	
	return BOT_ACTION_DESIRE_NONE
	
end

Consider[2]=function()
	local abilityNumber=2
	--------------------------------------
	-- Generic Variable Setting
	--------------------------------------
	local ability=AbilitiesReal[abilityNumber];
	
	if not ability:IsFullyCastable() then
		return BOT_ACTION_DESIRE_NONE, 0;
	end
	
	local Damage = ability:GetDuration()*ability:GetSpecialValueInt("damage_per_second")
	local Radius = ability:GetAOERadius()
	

	local allys = fun1:GetNearbyNonIllusionHeroes(npcBot, 1200, false)
	local allyCount = fun1:GetEnemyHeroNumber(npcBot, allys)
	local enemys = npcBot:GetNearbyHeroes(Radius+300,true,BOT_MODE_NONE)
	local WeakestEnemy,HeroHealth=utility.GetWeakestUnit(enemys)
	local creeps = npcBot:GetNearbyCreeps(Radius+300,true)
	local WeakestCreep,CreepHealth=utility.GetWeakestUnit(creeps)
	
	--try to kill enemy hero

	--------------------------------------
	-- Mode based usage
	--------------------------------------
	--protect myself
	if(npcBot:WasRecentlyDamagedByAnyHero(2) or (npcBot:GetActiveMode() == BOT_MODE_RETREAT and HealthPercentage<=0.4+#enemys*0.05))
	then
		return BOT_ACTION_DESIRE_HIGH
	end

	-- If we're going after someone
	if ( npcBot:GetActiveMode() == BOT_MODE_ROAM or
		 npcBot:GetActiveMode() == BOT_MODE_TEAM_ROAM or
		 npcBot:GetActiveMode() == BOT_MODE_DEFEND_ALLY or
		 npcBot:GetActiveMode() == BOT_MODE_ATTACK ) 
	then
		local npcEnemy = npcBot:GetTarget();
		
		if(ManaPercentage>0.4 or npcBot:GetMana()>ComboMana)
		then
			if ( npcEnemy ~= nil ) 
			then
				if ( GetUnitToUnitDistance(npcBot,npcEnemy) > 450 or npcEnemy:GetHealth()/npcEnemy:GetMaxHealth() < 0.4) and GetUnitToLocationDistance(npcBot, npcEnemy) < 1100
				then
					return BOT_ACTION_DESIRE_HIGH
				end
			end
		end
	end
	
	-- If we're farming
	if ( npcBot:GetActiveMode() == BOT_MODE_FARM )
	then
		if ( #creeps >= 3 and (ManaPercentage>0.4 or npcBot:GetMana()>ComboMana)) and allyCount < 3
		then
			return BOT_ACTION_DESIRE_LOW;
		end
	end

	return BOT_ACTION_DESIRE_NONE
	
end

Consider[3]=function()
	
	local abilityNumber=3
	--------------------------------------
	-- Generic Variable Setting
	--------------------------------------
	local ability=AbilitiesReal[abilityNumber];
	
	if not ability:IsFullyCastable() or fun1:IsPhysicalOutputDisabled(npcBot) then
		return BOT_ACTION_DESIRE_NONE, 0;
	end
	
	local CastRange = ability:GetCastRange();
	local Damage = ability:GetAbilityDamage();
	

	local allys = npcBot:GetNearbyHeroes( 1200, false, BOT_MODE_NONE );
	local enemys = npcBot:GetNearbyHeroes(CastRange+150,true,BOT_MODE_NONE)
	local WeakestEnemy,HeroHealth=utility.GetWeakestUnit(enemys)
	local creeps = npcBot:GetNearbyCreeps(CastRange+150,true)
	local WeakestCreep,CreepHealth=utility.GetWeakestUnit(creeps)

	--------------------------------------
	-- Global high-priorty usage
	--------------------------------------

	-- Check for a channeling enemy
	for _,npcEnemy in pairs( enemys )
	do
		if ( npcEnemy:IsChanneling() and CanCast[abilityNumber]( npcEnemy )) 
		then
			return BOT_ACTION_DESIRE_HIGH, npcEnemy;
		end
	end
	
	--------------------------------------
	-- Mode based usage
	--------------------------------------
	-- If we're going after someone
	if ( npcBot:GetActiveMode() == BOT_MODE_ROAM or
		 npcBot:GetActiveMode() == BOT_MODE_TEAM_ROAM or
		 npcBot:GetActiveMode() == BOT_MODE_DEFEND_ALLY or
		 npcBot:GetActiveMode() == BOT_MODE_ATTACK ) 
	then
		local npcEnemy = npcBot:GetTarget();

		if ( npcEnemy ~= nil ) 
		then
			if ( CanCast[abilityNumber]( npcEnemy ) and GetUnitToUnitDistance(npcBot,npcEnemy)< CastRange + 75*#allys)
			then
				return BOT_ACTION_DESIRE_MODERATE, npcEnemy
			end
		end
	end
	
	-- If my mana is enough,use it at enemy
	if ( npcBot:GetActiveMode() == BOT_MODE_LANING ) 
	then
		if((HealthPercentage>0.7 and ManaPercentage>0.4 or npcBot:GetMana()>ComboMana))
		then
			if (WeakestEnemy~=nil)
			then
				if ( CanCast[abilityNumber]( WeakestEnemy ) )
				then
					return BOT_ACTION_DESIRE_LOW,WeakestEnemy;
				end
			end
		end
	end
	
	-- If we're farming
	if ( npcBot:GetActiveMode() == BOT_MODE_FARM )
	then
		if ( #creeps >= 1 and ManaPercentage>0.6 or npcBot:GetMana()>ComboMana)
		then
			return BOT_ACTION_DESIRE_LOW, creeps[1];
		end
	end
	return BOT_ACTION_DESIRE_NONE, 0;
	
end

local function DoomEmptyAbilityThink(ability)
	return 0
end

local function centaur_khan_war_stomp(ability)
	if not ability:IsFullyCastable() then 
		return 0
	end
	local radius = ability:GetAOERadius()

	local enemies = fun1:GetNearbyNonIllusionHeroes(npcBot, radius + 90)
	local allys = fun1:GetNearbyNonIllusionHeroes(npcBot, 800)
	if fun1:GetEnemyHeroNumber(npcBot, enemies) >= 2 and (AbilitiesReal[6]:IsFullyCastable() or #ally >= 2) then 
		return RemapValClamped(mana, 100, ComboMana, BOT_ACTION_DESIRE_MODERATE, BOT_ACTION_DESIRE_HIGH)
	end
	if fun1:NotRetreating(npcBot) then 
		if local target = fun1:GetTargetIfGood() then 
			if fun1:NormalCanCast(target) and GetUnitToUnitDistance(npcBot, target) <= radius then 
				return RemapValClamped(mana, 100, ComboMana, BOT_ACTION_DESIRE_MODERATE, BOT_ACTION_DESIRE_HIGH) 
			end
		end
	else
		if enemies:Count(fun1.NormalCanCastFunction) then 
			return RemapValClamped(mana, 100, ComboMana, BOT_ACTION_DESIRE_MODERATE, BOT_ACTION_DESIRE_HIGH) 
		end
	end
	return 0
end

local function mud_golem_hurl_boulder(ability)
	if not ability:IsFullyCastable() then 
		return 0
	end
	local castRange = ability:GetCastRange()

	local enemies = fun1:GetNearbyNonIllusionHeroes(npcBot, castRange + 200)
	local allys = fun1:GetNearbyNonIllusionHeroes(npcBot, 1000)
	
	if local target = enemies:Min { t -> t:GetHealth() * if fun1:IsSeverelyDisabled(t) {0.5} else {1} } then
		return BOT_ACTION_DESIRE_HIGH, target 
	end
	if fun1:NotRetreating(npcBot) then 
		if local target = fun1:GetTargetIfGood() then 
			if fun1:NormalCanCast(target) then
				return BOT_ACTION_DESIRE_MODERATE, target 
			end
		end
		if local target = fun1:GetTargetIfBad() then 
			if fun1:NormalCanCast(target) then
				return BOT_ACTION_DESIRE_MODERATE, target 
			end
		end
	else
		if local target = enemies:Min { t -> GetUnitToUnitDistance(npcBot, t) } then 
			if fun1:NormalCanCast(target) then
				return BOT_ACTION_DESIRE_HIGH, target 
			end
		end
	end
	return 0
end

local function satyr_soulstealer_mana_burn(ability)
	if not ability:IsFullyCastable() then 
		return 0
	end
	local manaCost = ability:GetManaCost()
	local castRange = ability:GetCastRange()

	local enemies = fun1:GetNearbyNonIllusionHeroes(npcBot, castRange + 200)
	local allys = fun1:GetNearbyNonIllusionHeroes(npcBot, 1200)

	if fun1:IsAttackingEnemies(npcBot) then 
		if mana >= ComboMana + manaCost then
			if local target = enemies:Filter(fun1.NormalCanCastFunction)
				:Min { t -> t:GetHealth() * if fun1:IsSeverelyDisabledOrSlowed(t) {2} else {1} }
				then 
					return BOT_ACTION_DESIRE_MODERATE-0.1, target 
			end
		end
	end 
	if fun1:IsLaning(npcBot) then 
		if mana >= 110 then 
			if local target = enemies:Filter { t ->
					if not fun1.NormalCanCastFunction(t) then return false end
					if netWorth >= 15000 and not fun1:PhysicalCanCast(t) then return false end
					true
				}
				:Max { t -> 
					local m = t:GetMana()
					local desire = if m <= 40 { BOT_ACTION_DESIRE_LOW }
						elif m <= 150 { BOT_ACTION_DESIRE_HIGH }
						else { BOT_ACTION_DESIRE_MODERATE - 0.1 }
					if t:GetUnitName() == "npc_dota_hero_obsidian_destroyer" then 
						desire *= 0.1
					end
					desire
				} then 
					return BOT_ACTION_DESIRE_MODERATE, target
			end
		end
	end
	return 0
end

local function enraged_wildkin_tornado(ability)
	return 0
end


local function DoomAcquiredAbilityThink(ability)
	local abilityName = ability:GetName()
	if abilityName == "doom_bringer_empty1" or abilityName == "doom_bringer_empty2" then 
		return DoomEmptyAbilityThink(ability)
	elseif abilityName == "satyr_soulstealer_mana_burn" then 
		return satyr_soulstealer_mana_burn(ability)
	elseif abilityName == "centaur_khan_war_stomp" then 
		return centaur_khan_war_stomp(ability)
	elseif abilityName == "mud_golem_hurl_boulder" then 
		return mud_golem_hurl_boulder(ability)
	elseif abilityName == "enraged_wildkin_tornado" then
		return enraged_wildkin_tornado(ability)
	else
		return 0
	end
end

Consider[4] = { ->
	DoomAcquiredAbilityThink(AbilitiesReal[4])
}
Consider[5] = { ->
	DoomAcquiredAbilityThink(AbilitiesReal[5])
}

Consider[6]=function()
	local abilityNumber=6
	--------------------------------------
	-- Generic Variable Setting
	--------------------------------------
	local ability=AbilitiesReal[abilityNumber];
	
	if not ability:IsFullyCastable() then
		return BOT_ACTION_DESIRE_NONE, 0;
	end
	
	local Damage = ability:GetDuration()*ability:GetSpecialValueInt("damage_per_second")
	local CastRange = ability:GetCastRange();
	

	local allys = fun1:GetNearbyNonIllusionHeroes(npcBot, 1200, false)
	local enemys = fun1:GetNearbyNonIllusionHeroes(npcBot, CastRange+300, true)
	local WeakestEnemy,HeroHealth=utility.GetWeakestUnit(enemys)
	local creeps = npcBot:GetNearbyCreeps(CastRange+300,true)
	local WeakestCreep,CreepHealth=utility.GetWeakestUnit(creeps)
	
	--------------------------------------
	-- Global high-priorty usage
	--------------------------------------
	-- If we're in a teamfight, use it on the scariest enemy
	local tableNearbyAttackingAlliedHeroes = npcBot:GetNearbyHeroes( 1000, false, BOT_MODE_ATTACK );
	if ( #tableNearbyAttackingAlliedHeroes >= 2 or #allys >=3) 
	then

		local npcMostDangerousEnemy = nil;
		local nMostDangerousDamage = 0;

		for _,npcEnemy in pairs( enemys )
		do
			if ( CanCast[abilityNumber]( npcEnemy ) and not enemyDisabled(npcEnemy))
			then
				local Damage2 = npcEnemy:GetEstimatedDamageToTarget( false, npcBot, 3.0, DAMAGE_TYPE_ALL );
				if ( Damage2 > nMostDangerousDamage )
				then
					nMostDangerousDamage = Damage2;
					npcMostDangerousEnemy = npcEnemy;
				end
			end
		end

		if ( npcMostDangerousEnemy ~= nil )
		then
			return BOT_ACTION_DESIRE_HIGH, npcMostDangerousEnemy;
		end
	end
	
	-- Check for a channeling enemy
	if local channeling = enemys:First { t -> 
		fun1:IsChannelingBreakWorthAbility(t, "moderate") and CanCast[6](t)
	} then
		return BOT_ACTION_DESIRE_MODERATE-0.1, channeling
	end
	
	--Try to kill enemy hero
	if(npcBot:GetActiveMode() ~= BOT_MODE_RETREAT ) 
	then
		if (WeakestEnemy~=nil)
		then
			if ( CanCast[abilityNumber]( WeakestEnemy ) )
			then
				if(HeroHealth<=WeakestEnemy:GetActualIncomingDamage(Damage,DAMAGE_TYPE_MAGICAL) or (HeroHealth<=WeakestEnemy:GetActualIncomingDamage(GetComboDamage(),DAMAGE_TYPE_MAGICAL) and npcBot:GetMana()>ComboMana))
				then
					return BOT_ACTION_DESIRE_HIGH,WeakestEnemy; 
				end
			end
		end
	end
	--------------------------------------
	-- Mode based usage
	--------------------------------------
	-- If we're seriously retreating, see if we can land a stun on someone who's damaged us recently
	--[[if ( npcBot:GetActiveMode() == BOT_MODE_RETREAT and npcBot:GetActiveModeDesire() >= BOT_MODE_DESIRE_HIGH ) 
	then
		for _,npcEnemy in pairs( enemys )
		do
			if ( npcBot:WasRecentlyDamagedByHero( npcEnemy, 2.0 ) ) 
			then
				if ( CanCast[abilityNumber]( npcEnemy ) and not enemyDisabled(npcEnemy)) 
				then
					return BOT_ACTION_DESIRE_HIGH, npcEnemy;
				end
			end
		end
	end]]
	
	-- If we're going after someone
	if ( npcBot:GetActiveMode() == BOT_MODE_ROAM or
		 npcBot:GetActiveMode() == BOT_MODE_TEAM_ROAM or
		 npcBot:GetActiveMode() == BOT_MODE_DEFEND_ALLY or
		 npcBot:GetActiveMode() == BOT_MODE_ATTACK ) 
	then
		if local npcEnemy = fun1:GetTargetIfGood(npcBot) then
			if ( CanCast[abilityNumber]( npcEnemy ) and not enemyDisabled(npcEnemy) and GetUnitToUnitDistance(npcBot,npcEnemy)< CastRange + 75*#allys)
			then
				return BOT_ACTION_DESIRE_MODERATE, npcEnemy
			end
		end
	end
	
	return BOT_ACTION_DESIRE_NONE, 0;
end

local RefreshAbilities = fun1:EveryManySeconds(2) { ->
	AbilitiesReal = fun1:Range(1, 10):Map { t ->
		npcBot:GetAbilityInSlot(t)
	}:Filter { t ->
		t and t:GetName() ~= "ability_hidden" and not t:IsTalent()
	}
}

fun1:AutoModifyConsiderFunction(npcBot, Consider, AbilitiesReal)
function AbilityUsageThink()
	RefreshAbilities()

	-- Check if we're already using an ability
	if npcBot:IsUsingAbility() or npcBot:IsChanneling() or npcBot:IsSilenced() then 
		return
	end
	
	ComboMana=GetComboMana()
	AttackRange=npcBot:GetAttackRange()
	ManaPercentage=npcBot:GetMana()/npcBot:GetMaxMana()
	HealthPercentage=npcBot:GetHealth()/npcBot:GetMaxHealth()

	level = npcBot:GetLevel()
	attackRange = npcBot:GetAttackRange()
    health = npcBot:GetHealth()
    maxHealth = npcBot:GetMaxHealth()
    healthPercent = fun1:GetHealthPercent(npcBot)
    mana = npcBot:GetMana()
    maxMana = npcBot:GetMaxMana()
    manaPercent = fun1:GetManaPercent(npcBot)
	netWorth = npcBot:GetNetWorth()

	allEnemies = fun1:GetNearbyHeroes(npcBot, 1200)
    enemies = allEnemies:Filter { t -> fun1:MayNotBeIllusion(npcBot, t) }
    enemyCount = fun1:GetEnemyHeroNumber(npcBot, enemies)
    friends = fun1:GetNearbyNonIllusionHeroes(npcBot, 1500, true)
    friendCount = fun1:GetEnemyHeroNumber(npcBot, friends)
    enemyCreeps = fun1:GetNearbyAttackableCreeps(npcBot, 900)
    friendCreeps = fun1:GetNearbyAttackableCreeps(npcBot, npcBot:GetAttackRange()+150, false)
    neutralCreeps = npcBot:GetNearbyNeutralCreeps(900)
    tower = fun1:GetLaningTower(npcBot)
	
	cast=ability_item_usage_generic.ConsiderAbility(AbilitiesReal,Consider)
	---------------------------------debug--------------------------------------------
	if(debugmode==true)
	then
		ability_item_usage_generic.PrintDebugInfo(AbilitiesReal,cast)
	end
	ability_item_usage_generic.UseAbility(AbilitiesReal,cast)
end

function CourierUsageThink() 
	ability_item_usage_generic.CourierUsageThink()
end